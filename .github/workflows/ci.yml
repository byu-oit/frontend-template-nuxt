name: CI Checks

on:
  pull_request:
    types: [opened, synchronize, edited, reopened]
    branches: [ master, dev ]
    paths-ignore:
      - '.dependabot/config.yml'
      - 'README.md'
      - '.editorconfig'

jobs:
  build-test:
    name: Build, Test, and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: '12'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2.1.6
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: yarn install --unsafe-perm --prefer-offline --frozen-lockfile

      - name: Test
        run: yarn test --coverage

      - name: Lint
        run: yarn lint

      # Even though we won't use the output of this build, there have been cases where `yarn test` ran fine
      # but `yarn generate` failed. So we do an actual build here in CI
      - name: Test Build
        run: yarn generate

      - name: CodeCov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.codecov_token }}

  terraform-plan:
    name: Terraform fmt and plan
    runs-on: ubuntu-latest
    env:
      tf_version: '0.13.3'
      TF_IN_AUTOMATION: 'true'

    steps:
      - name: Setup DEV Environment Variables # TODO replace <GITHUB_AWS_DEV_KEY_NAME>, <GITHUB_AWS_DEV_SECRET_NAME>
        if: github.base_ref == 'dev'
        run: |
          echo "aws_key=${{ secrets.<GITHUB_AWS_DEV_KEY_NAME> }}" >> $GITHUB_ENV
          echo "aws_secret=${{ secrets.<GITHUB_AWS_DEV_SECRET_NAME> }}" >> $GITHUB_ENV
          echo "tf_working_dir=./terraform/dev/app" >> $GITHUB_ENV

      - name: Setup PRD Environment Variables # TODO replace <GITHUB_AWS_PRD_KEY_NAME>, <GITHUB_AWS_PRD_SECRET_NAME>
        if: github.base_ref == 'master'
        run: |
          echo "aws_key=${{ secrets.<GITHUB_AWS_PRD_KEY_NAME> }}" >> $GITHUB_ENV
          echo "aws_secret=${{ secrets.<GITHUB_AWS_PRD_SECRET_NAME> }}" >> $GITHUB_ENV
          echo "tf_working_dir=./terraform/prd/app" >> $GITHUB_ENV

      - name: Check out
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.aws_key }}
          aws-secret-access-key: ${{ env.aws_secret }}
          aws-region: us-west-2

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.tf_version }}

      - name: Terraform Init
        working-directory: ${{ env.tf_working_dir }}
        run: terraform init

      - name: Terraform Format
        working-directory: ${{ env.tf_working_dir }}
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ${{ env.tf_working_dir }}
        id: plan
        run: terraform plan -input=false -out=plan

      - name: Analyze Terraform Plan
        uses: byu-oit/github-action-tf-plan-analyzer@v2.0.5
        with:
          divvycloud-username: ${{ secrets.DIVVYCLOUD_USERNAME }}
          divvycloud-password: ${{ secrets.DIVVYCLOUD_PASSWORD }}
          working-directory: ${{ env.tf_working_dir }}
          terraform-plan-file: plan

      - name: Comment Terraform Plan
        uses: byu-oit/github-action-tf-plan-comment@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ${{ env.tf_working_dir }}
          terraform-plan-file: plan
