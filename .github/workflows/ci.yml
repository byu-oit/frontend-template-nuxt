name: CI Checks

on:
  pull_request:
    types: [opened, synchronize, edited, reopened]
    branches: [ master, dev ]
    paths:
      - 'src/**'
      - '.github/workflows/ci.yml'
      - '.github/workflows/pipeline.yml'
env:
  app_working_dir: './src'
  FORCE_COLOR: 3
  node_version: '14.x'

jobs:
  app-audit:
    name: Audit App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node_version }}

      - name: npm audit
        working-directory: ${{ env.app_working_dir }}
        run: npm audit --audit-level=critical

  app-test:
    name: Test App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node_version }}

      - uses: actions/cache@v3.0.1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install
        working-directory: ${{ env.app_working_dir }}
        run: npm ci --prefer-offline

      - name: Test
        working-directory: ${{ env.app_working_dir }}
        run: npm run test -- --coverage

      - name: CodeCov
        uses: codecov/codecov-action@v2.0.2
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          token: ${{ secrets.codecov_token }}

  app-lint:
    name: Lint App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node_version }}

      - uses: actions/cache@v3.0.1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install
        working-directory: ${{ env.app_working_dir }}
        run: npm ci --prefer-offline

      - name: Lint
        working-directory: ${{ env.app_working_dir }}
        run: npm run lint

  app-build:
    name: Build App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node_version }}

      - uses: actions/cache@v3.0.1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install App
        working-directory: ${{ env.app_working_dir }}
        run: npm ci --prefer-offline

      - name: Build App
        working-directory: ${{ env.app_working_dir }}
        run: npm run build

  terraform-plan:
    name: Terraform fmt and plan
    runs-on: ubuntu-latest
    env:
      tf_version: '0.13.3'
      TF_IN_AUTOMATION: 'true'

    steps:
      - name: Setup DEV Environment Variables # TODO replace <GITHUB_AWS_DEV_KEY_NAME>, <GITHUB_AWS_DEV_SECRET_NAME>
        if: github.base_ref == 'dev'
        run: |
          echo "aws_key=${{ secrets.<GITHUB_AWS_DEV_KEY_NAME> }}" >> $GITHUB_ENV
          echo "aws_secret=${{ secrets.<GITHUB_AWS_DEV_SECRET_NAME> }}" >> $GITHUB_ENV
          echo "tf_working_dir=./terraform/dev/app" >> $GITHUB_ENV

      - name: Setup PRD Environment Variables # TODO replace <GITHUB_AWS_PRD_KEY_NAME>, <GITHUB_AWS_PRD_SECRET_NAME>
        if: github.base_ref == 'master'
        run: |
          echo "aws_key=${{ secrets.<GITHUB_AWS_PRD_KEY_NAME> }}" >> $GITHUB_ENV
          echo "aws_secret=${{ secrets.<GITHUB_AWS_PRD_SECRET_NAME> }}" >> $GITHUB_ENV
          echo "tf_working_dir=./terraform/prd/app" >> $GITHUB_ENV

      - name: Check out
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.aws_key }}
          aws-secret-access-key: ${{ env.aws_secret }}
          aws-region: us-west-2

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.tf_version }}

      - name: Terraform Init
        working-directory: ${{ env.tf_working_dir }}
        run: terraform init

      - name: Terraform Format
        working-directory: ${{ env.tf_working_dir }}
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ${{ env.tf_working_dir }}
        id: plan
        run: terraform plan -input=false -out=plan

      - name: Analyze Terraform Plan
        uses: byu-oit/github-action-tf-plan-analyzer@v2
        with:
          divvycloud-username: ${{ secrets.DIVVYCLOUD_USERNAME }}
          divvycloud-password: ${{ secrets.DIVVYCLOUD_PASSWORD }}
          working-directory: ${{ env.tf_working_dir }}
          terraform-plan-file: plan

      - name: Comment Terraform Plan
        uses: byu-oit/github-action-tf-plan-comment@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ${{ env.tf_working_dir }}
          terraform-plan-file: plan
